unit class LibXML::Raw::Gen:ver<0.0.1>;

use LibXML;
use LibXML::Document;
use LibXML::Element;
use LibXML::Raw::Meta;

constant Meta = LibXML::Raw::Meta;
has Meta:D $.meta is required;

sub gen-dir(Str:D $ns) {
    with $*SPEC.catdir('lib', $ns, 'Raw', 'Gen') {
        mkdir $_;
        $_;
    }
}

sub write-file(Meta::File:D $module, :$mod='LibXML', :$lib='XML2') {
    my $module-name = $module.name;
    my $path =  $*SPEC.catfile( gen-dir($mod), $module-name ~ '.rakumod');
    {
        my $*OUT = open $path, :w;
        say 'use v6;';
        say "# -- DO NOT EDIT --";
        say "# generated by: $*PROGRAM-NAME";
        say '';
        say "unit module {$mod}::Raw::Gen::$module-name;";
        say "# $_:" with $module.summary;
        say "#    $_" with $module.description;
        if $mod eq 'LibXML' {
            say 'use ' ~ $mod ~ '::Raw::Defs :$XML2, :xmlCharP;';
        }
        else {
            say 'use LibXML::Raw::Defs :xmlCharP;';
            say 'use ' ~ $mod ~ '::Raw::Defs :$XML2;';
        }

        for $module.enums.sort {
            my $name = .key;
            say '';
            say "enum $name is export (";
            for .value.pairs.sort {
                say "    {.key} => {.value},";
            }
            say ');';
        }

        for $module.typedefs {
            my $name = .name;
            my $type = .type;
            $type = 'Pointer'
                if $type ~~ /'struct'/;
        }

        for $module.structs {
            my $name = .name;
            my $repr = .fields ?? 'CStruct' !!  'CPointer';
            say '';
            say "class $name is repr('$repr') \{";
            for .fields {
                my $name = .name;
                my $type = .type;
                my $info = .Str.trim with .info;
                $info = ' # ' ~ $info if $info;
                say "    has $type \$\.$name;$info";
            }
            say '' if .fields && .subs;
            for .subs.sort(*.name).list {
                say "    " ~ .Str;
            }
            say '' if .subs && .methods;
            for .methods.sort(*.name).list {
                say "    " ~ .Str(:method);
            }
            say '}';
        }
        say '' if $module.subs;
        for $module.subs.list {
            say .Str;
        }
    }
    $*ERR.print: '!';

}

method write-files(:$mod, :$lib) {
    write-file($_, :$mod, :$lib) for $!meta.files;
}
