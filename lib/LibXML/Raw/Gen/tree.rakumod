use v6;
#  -- DO NOT EDIT --
# generated by: generator.raku 

unit module LibXML::Raw::Gen::tree;
# interfaces for tree manipulation:
#    this module describes the structures found in an tree resulting from an XML or HTML parsing, as well as the API provided for various processing on that tree 
use LibXML::Raw::Defs :$lib, :xmlCharP;

enum xmlAttributeDefault is export (
    XML_ATTRIBUTE_FIXED => 4,
    XML_ATTRIBUTE_IMPLIED => 3,
    XML_ATTRIBUTE_NONE => 1,
    XML_ATTRIBUTE_REQUIRED => 2,
);

enum xmlAttributeType is export (
    XML_ATTRIBUTE_CDATA => 1,
    XML_ATTRIBUTE_ENTITIES => 6,
    XML_ATTRIBUTE_ENTITY => 5,
    XML_ATTRIBUTE_ENUMERATION => 9,
    XML_ATTRIBUTE_ID => 2,
    XML_ATTRIBUTE_IDREF => 3,
    XML_ATTRIBUTE_IDREFS => 4,
    XML_ATTRIBUTE_NMTOKEN => 7,
    XML_ATTRIBUTE_NMTOKENS => 8,
    XML_ATTRIBUTE_NOTATION => 10,
);

enum xmlBufferAllocationScheme is export (
    XML_BUFFER_ALLOC_BOUNDED => 6,
    XML_BUFFER_ALLOC_DOUBLEIT => 1,
    XML_BUFFER_ALLOC_EXACT => 2,
    XML_BUFFER_ALLOC_HYBRID => 5,
    XML_BUFFER_ALLOC_IMMUTABLE => 3,
    XML_BUFFER_ALLOC_IO => 4,
);

enum xmlDocProperties is export (
    XML_DOC_DTDVALID => 8,
    XML_DOC_HTML => 128,
    XML_DOC_INTERNAL => 64,
    XML_DOC_NSVALID => 2,
    XML_DOC_OLD10 => 4,
    XML_DOC_USERBUILT => 32,
    XML_DOC_WELLFORMED => 1,
    XML_DOC_XINCLUDE => 16,
);

enum xmlElementContentOccur is export (
    XML_ELEMENT_CONTENT_MULT => 3,
    XML_ELEMENT_CONTENT_ONCE => 1,
    XML_ELEMENT_CONTENT_OPT => 2,
    XML_ELEMENT_CONTENT_PLUS => 4,
);

enum xmlElementContentType is export (
    XML_ELEMENT_CONTENT_ELEMENT => 2,
    XML_ELEMENT_CONTENT_OR => 4,
    XML_ELEMENT_CONTENT_PCDATA => 1,
    XML_ELEMENT_CONTENT_SEQ => 3,
);

enum xmlElementType is export (
    XML_ATTRIBUTE_DECL => 16,
    XML_ATTRIBUTE_NODE => 2,
    XML_CDATA_SECTION_NODE => 4,
    XML_COMMENT_NODE => 8,
    XML_DOCB_DOCUMENT_NODE => 21,
    XML_DOCUMENT_FRAG_NODE => 11,
    XML_DOCUMENT_NODE => 9,
    XML_DOCUMENT_TYPE_NODE => 10,
    XML_DTD_NODE => 14,
    XML_ELEMENT_DECL => 15,
    XML_ELEMENT_NODE => 1,
    XML_ENTITY_DECL => 17,
    XML_ENTITY_NODE => 6,
    XML_ENTITY_REF_NODE => 5,
    XML_HTML_DOCUMENT_NODE => 13,
    XML_NAMESPACE_DECL => 18,
    XML_NOTATION_NODE => 12,
    XML_PI_NODE => 7,
    XML_TEXT_NODE => 3,
    XML_XINCLUDE_END => 20,
    XML_XINCLUDE_START => 19,
);

enum xmlElementTypeVal is export (
    XML_ELEMENT_TYPE_ANY => 2,
    XML_ELEMENT_TYPE_ELEMENT => 4,
    XML_ELEMENT_TYPE_EMPTY => 1,
    XML_ELEMENT_TYPE_MIXED => 3,
    XML_ELEMENT_TYPE_UNDEFINED => 0,
);

class xmlAttr is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ATTRIBUTE_NODE, must be second !
    has xmlCharP $.name; # the name of the property
    has xmlNode $.children; # the value of the property
    has xmlNode $.last; # NULL
    has xmlNode $.parent; # child->parent link
    has xmlAttr $.next; # next sibling link
    has xmlAttr $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document
    has xmlNs * $.ns; # pointer to the associated namespace
    has xmlAttributeType $.atype; # the attribute type if validating
    has Pointer $.psvi; # for type/PSVI informations

    our sub xmlHasNsProp(const xmlNode * $node, xmlCharP $name, xmlCharP $nameSpace --> xmlAttr) is native(XML2) is export {*}
    our sub xmlHasProp(const xmlNode * $node, xmlCharP $name --> xmlAttr) is native(XML2) is export {*}

    method xmlFreeProp() is native(XML2) {*}
    method xmlFreePropList() is native(XML2) {*}
    method xmlRemoveProp( --> int32) is native(XML2) {*}
}

class xmlAttribute is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ATTRIBUTE_DECL, must be second !
    has xmlCharP $.name; # Attribute name
    has xmlNode $.children; # NULL
    has xmlNode $.last; # NULL
    has xmlDtd $.parent; # -> DTD
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document
    has xmlAttribute $.nexth; # next in hash table
    has xmlAttributeType $.atype; # The attribute type
    has xmlAttributeDefault $.def; # the default
    has xmlCharP $.defaultValue; # or the default value
    has xmlEnumeration $.tree; # or the enumeration tree if any
    has xmlCharP $.prefix; # the namespace prefix if any
    has xmlCharP $.elem; # Element holding the attribute
}

class xmlBuf is repr('CPointer') {
    method xmlBufEnd( --> xmlCharP) is native(XML2) {*}
    method xmlBufGetNodeContent(const xmlNode * $cur --> int32) is native(XML2) {*}
    method xmlBufNodeDump(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format --> size_t) is native(XML2) {*}
    method xmlBufShrink(size_t $len --> size_t) is native(XML2) {*}
}

class xmlBuffer is repr('CStruct') {
    has xmlCharP $.content; # The buffer content UTF8
    has uint32 $.use; # The buffer size used
    has uint32 $.size; # The buffer size
    has xmlBufferAllocationScheme $.alloc; # The realloc method
    has xmlCharP $.contentIO; # in IO mode we may have a different base

    our sub xmlBufferCreate( --> xmlBuffer) is native(XML2) is export {*}
    our sub xmlBufferCreateSize(size_t $size --> xmlBuffer) is native(XML2) is export {*}
    our sub xmlBufferCreateStatic(Pointer $mem, size_t $size --> xmlBuffer) is native(XML2) is export {*}

    method htmlNodeDump(xmlDoc $doc, xmlNode $cur --> int32) is native(XML2) {*}
    method xmlAttrSerializeTxtContent(xmlDoc $doc, xmlAttr $attr, xmlCharP $string) is native(XML2) {*}
    method xmlBufferAdd(xmlCharP $str, int32 $len --> int32) is native(XML2) {*}
    method xmlBufferAddHead(xmlCharP $str, int32 $len --> int32) is native(XML2) {*}
    method xmlBufferCCat(Str $str --> int32) is native(XML2) {*}
    method xmlBufferCat(xmlCharP $str --> int32) is native(XML2) {*}
    method xmlBufferDetach( --> xmlCharP) is native(XML2) {*}
    method xmlBufferEmpty() is native(XML2) {*}
    method xmlBufferFree() is native(XML2) {*}
    method xmlBufferGrow(uint32 $len --> int32) is native(XML2) {*}
    method xmlBufferResize(uint32 $size --> int32) is native(XML2) {*}
    method xmlBufferSetAllocationScheme(xmlBufferAllocationScheme $scheme) is native(XML2) {*}
    method xmlBufferShrink(uint32 $len --> int32) is native(XML2) {*}
    method xmlBufferWriteCHAR(xmlCharP $string) is native(XML2) {*}
    method xmlBufferWriteChar(Str $string) is native(XML2) {*}
    method xmlBufferWriteQuotedString(xmlCharP $string) is native(XML2) {*}
    method xmlDumpAttributeDecl(xmlAttribute $attr) is native(XML2) {*}
    method xmlDumpAttributeTable(xmlAttributeTable $table) is native(XML2) {*}
    method xmlDumpElementDecl(xmlElement $elem) is native(XML2) {*}
    method xmlDumpElementTable(xmlElementTable $table) is native(XML2) {*}
    method xmlDumpEntitiesTable(xmlEntitiesTable $table) is native(XML2) {*}
    method xmlDumpEntityDecl(xmlEntity $ent) is native(XML2) {*}
    method xmlDumpNotationDecl(xmlNotation $nota) is native(XML2) {*}
    method xmlDumpNotationTable(xmlNotationTable $table) is native(XML2) {*}
    method xmlExpDump(xmlExpNode $expr) is native(XML2) {*}
    method xmlNewTextWriterMemory(int32 $compression --> xmlTextWriter) is native(XML2) {*}
    method xmlNodeBufGetContent(const xmlNode * $cur --> int32) is native(XML2) {*}
    method xmlNodeDump(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format --> int32) is native(XML2) {*}
    method xmlOutputBufferCreateBuffer(xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(XML2) {*}
    method xmlSaveToBuffer(Str $encoding, int32 $options --> xmlSaveCtxt) is native(XML2) {*}
}

class xmlDOMWrapCtxt is repr('CStruct') {
    has Pointer $._private; # * The type of this context, just in case we need specialized * contexts in the future. *
    has int32 $.type; # * Internal namespace map used for various operations. *
    has Pointer $.namespaceMap; # * Use this one to acquire an xmlNsPtr intended for node->ns. * (Note that this is not intended for elem->nsDef). *
    has xmlDOMWrapAcquireNsFunction $.getNsForNodeFunc;

    our sub xmlDOMWrapNewCtxt( --> xmlDOMWrapCtxt) is native(XML2) is export {*}

    method xmlDOMWrapAdoptNode(xmlDoc $sourceDoc, xmlNode $node, xmlDoc $destDoc, xmlNode $destParent, int32 $options --> int32) is native(XML2) {*}
    method xmlDOMWrapCloneNode(xmlDoc $sourceDoc, xmlNode $node, xmlNodePtr * $resNode, xmlDoc $destDoc, xmlNode $destParent, int32 $deep, int32 $options --> int32) is native(XML2) {*}
    method xmlDOMWrapFreeCtxt() is native(XML2) {*}
    method xmlDOMWrapReconcileNamespaces(xmlNode $elem, int32 $options --> int32) is native(XML2) {*}
    method xmlDOMWrapRemoveNode(xmlDoc $doc, xmlNode $node, int32 $options --> int32) is native(XML2) {*}
}

class xmlDoc is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_DOCUMENT_NODE, must be second !
    has Str $.name; # name/filename/URI of the document
    has xmlNode $.children; # the document tree
    has xmlNode $.last; # last child link
    has xmlNode $.parent; # child->parent link
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # autoreference to itself End of common part
    has int32 $.compression; # level of zlib compression
    has int32 $.standalone; # standalone document (no external refs) 1 if standalone="yes" 0 if standalone="no" -1 if there is no XML declaration -2 if there is an XML declaration, but no standalone attribute was specified
    has xmlDtd $.intSubset; # the document internal subset
    has xmlDtd $.extSubset; # the document external subset
    has xmlNs $.oldNs; # Global namespace, the old way
    has xmlCharP $.version; # the XML version string
    has xmlCharP $.encoding; # external initial encoding, if any
    has Pointer $.ids; # Hash table for ID attributes if any
    has Pointer $.refs; # Hash table for IDREFs attributes if any
    has xmlCharP $.URL; # The URI for that document
    has int32 $.charset; # encoding of the in-memory content actually an xmlCharEncoding
    has xmlDict $.dict; # dict used to allocate names or NULL
    has Pointer $.psvi; # for type/PSVI informations
    has int32 $.parseFlags; # set of xmlParserOption used to parse the document
    has int32 $.properties; # set of xmlDocProperties for this document set at the end of parsing

    our sub xmlNewDoc(xmlCharP $version --> xmlDoc) is native(XML2) is export {*}
    our sub xmlParseCatalogFile(Str $filename --> xmlDoc) is native(XML2) is export {*}
    our sub xmlParseDoc(xmlCharP $cur --> xmlDoc) is native(XML2) is export {*}
    our sub xmlParseEntity(Str $filename --> xmlDoc) is native(XML2) is export {*}
    our sub xmlParseFile(Str $filename --> xmlDoc) is native(XML2) is export {*}
    our sub xmlParseMemory(Str $buffer, int32 $size --> xmlDoc) is native(XML2) is export {*}
    our sub xmlReadDoc(xmlCharP $cur, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) is export {*}
    our sub xmlReadFd(int32 $fd, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) is export {*}
    our sub xmlReadFile(Str $filename, Str $encoding, int32 $options --> xmlDoc) is native(XML2) is export {*}
    our sub xmlReadIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) is export {*}
    our sub xmlReadMemory(Str $buffer, int32 $size, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) is export {*}
    our sub xmlRecoverDoc(xmlCharP $cur --> xmlDoc) is native(XML2) is export {*}
    our sub xmlRecoverFile(Str $filename --> xmlDoc) is native(XML2) is export {*}
    our sub xmlRecoverMemory(Str $buffer, int32 $size --> xmlDoc) is native(XML2) is export {*}

    method htmlDocDumpMemory(xmlChar ** $mem, Pointer[int32] $size) is native(XML2) {*}
    method htmlDocDumpMemoryFormat(xmlChar ** $mem, Pointer[int32] $size, int32 $format) is native(XML2) {*}
    method xlinkIsLink(xmlNode $node --> xlinkType) is native(XML2) {*}
    method xmlAddDocEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(XML2) {*}
    method xmlAddDtdEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(XML2) {*}
    method xmlC14NDocDumpMemory(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlChar ** $doc_txt_ptr --> int32) is native(XML2) {*}
    method xmlC14NDocSave(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, Str $filename, int32 $compression --> int32) is native(XML2) {*}
    method xmlC14NDocSaveTo(xmlNodeSet $nodes, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlOutputBuffer $buf --> int32) is native(XML2) {*}
    method xmlC14NExecute(xmlC14NIsVisibleCallback $is_visible_callback, Pointer $user_data, int32 $mode, xmlChar ** $inclusive_ns_prefixes, int32 $with_comments, xmlOutputBuffer $buf --> int32) is native(XML2) {*}
    method xmlCopyDoc(int32 $recursive --> xmlDoc) is native(XML2) {*}
    method xmlCopyDocElementContent(xmlElementContent $cur --> xmlElementContent) is native(XML2) {*}
    method xmlCreateIntSubset(xmlCharP $name, xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(XML2) {*}
    method xmlDocCopyNodeList(xmlNode $node --> xmlNode) is native(XML2) {*}
    method xmlDocDumpFormatMemory(xmlChar ** $mem, Pointer[int32] $size, int32 $format) is native(XML2) {*}
    method xmlDocDumpFormatMemoryEnc(xmlChar ** $doc_txt_ptr, Pointer[int32] $doc_txt_len, Str $txt_encoding, int32 $format) is native(XML2) {*}
    method xmlDocDumpMemory(xmlChar ** $mem, Pointer[int32] $size) is native(XML2) {*}
    method xmlDocDumpMemoryEnc(xmlChar ** $doc_txt_ptr, Pointer[int32] $doc_txt_len, Str $txt_encoding) is native(XML2) {*}
    method xmlDocSetRootElement(xmlNode $root --> xmlNode) is native(XML2) {*}
    method xmlEncodeEntities(xmlCharP $input --> xmlCharP) is native(XML2) {*}
    method xmlEncodeEntitiesReentrant(xmlCharP $input --> xmlCharP) is native(XML2) {*}
    method xmlFreeDoc() is native(XML2) {*}
    method xmlFreeDocElementContent(xmlElementContent $cur) is native(XML2) {*}
    method xmlGetDtdEntity(xmlCharP $name --> xmlEntity) is native(XML2) {*}
    method xmlGetID(xmlCharP $ID --> xmlAttr) is native(XML2) {*}
    method xmlGetParameterEntity(xmlCharP $name --> xmlEntity) is native(XML2) {*}
    method xmlGetRefs(xmlCharP $ID --> xmlList) is native(XML2) {*}
    method xmlIsID(xmlNode $elem, xmlAttr $attr --> int32) is native(XML2) {*}
    method xmlIsMixedElement(xmlCharP $name --> int32) is native(XML2) {*}
    method xmlIsRef(xmlNode $elem, xmlAttr $attr --> int32) is native(XML2) {*}
    method xmlNewCDataBlock(xmlCharP $content, int32 $len --> xmlNode) is native(XML2) {*}
    method xmlNewCharRef(xmlCharP $name --> xmlNode) is native(XML2) {*}
    method xmlNewDocComment(xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewDocElementContent(xmlCharP $name, xmlElementContentType $type --> xmlElementContent) is native(XML2) {*}
    method xmlNewDocFragment( --> xmlNode) is native(XML2) {*}
    method xmlNewDocNode(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewDocNodeEatName(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewDocPI(xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewDocProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlNewDocRawNode(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewDocTextLen(xmlCharP $content, int32 $len --> xmlNode) is native(XML2) {*}
    method xmlNewDtd(xmlCharP $name, xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(XML2) {*}
    method xmlNewEntity(xmlCharP $name, int32 $type, xmlCharP $ExternalID, xmlCharP $SystemID, xmlCharP $content --> xmlEntity) is native(XML2) {*}
    method xmlNewGlobalNs(xmlCharP $href, xmlCharP $prefix --> xmlNs) is native(XML2) {*}
    method xmlNewTextWriterTree(xmlNode $node, int32 $compression --> xmlTextWriter) is native(XML2) {*}
    method xmlNodeListGetString(const xmlNode * $list, int32 $inLine --> xmlCharP) is native(XML2) {*}
    method xmlParseBalancedChunkMemory(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $string, xmlNodePtr * $lst --> int32) is native(XML2) {*}
    method xmlParseBalancedChunkMemoryRecover(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $string, xmlNodePtr * $lst, int32 $recover --> int32) is native(XML2) {*}
    method xmlParseExternalEntity(xmlSAXHandler $sax, Pointer $user_data, int32 $depth, xmlCharP $URL, xmlCharP $ID, xmlNodePtr * $lst --> int32) is native(XML2) {*}
    method xmlReaderWalker( --> xmlTextReader) is native(XML2) {*}
    method xmlReconciliateNs(xmlNode $tree --> int32) is native(XML2) {*}
    method xmlRelaxNGNewDocParserCtxt( --> xmlRelaxNGParserCtxt) is native(XML2) {*}
    method xmlRemoveID(xmlAttr $attr --> int32) is native(XML2) {*}
    method xmlRemoveRef(xmlAttr $attr --> int32) is native(XML2) {*}
    method xmlSchemaNewDocParserCtxt( --> xmlSchemaParserCtxt) is native(XML2) {*}
    method xmlSchematronNewDocParserCtxt( --> xmlSchematronParserCtxt) is native(XML2) {*}
    method xmlSearchNs(xmlNode $node, xmlCharP $nameSpace --> xmlNs) is native(XML2) {*}
    method xmlSearchNsByHref(xmlNode $node, xmlCharP $href --> xmlNs) is native(XML2) {*}
    method xmlSetDocCompressMode(int32 $mode) is native(XML2) {*}
    method xmlShell(Str $filename, xmlShellReadlineFunc $input, FILE * $output) is native(XML2) {*}
    method xmlValidNormalizeAttributeValue(xmlNode $elem, xmlCharP $name, xmlCharP $value --> xmlCharP) is native(XML2) {*}
    method xmlXIncludeNewContext( --> xmlXIncludeCtxt) is native(XML2) {*}
    method xmlXIncludeProcess( --> int32) is native(XML2) {*}
    method xmlXIncludeProcessFlags(int32 $flags --> int32) is native(XML2) {*}
    method xmlXIncludeProcessFlagsData(int32 $flags, Pointer $data --> int32) is native(XML2) {*}
    method xmlXPathNewContext( --> xmlXPathContext) is native(XML2) {*}
    method xmlXPathOrderDocElems( --> long) is native(XML2) {*}
    method xmlXPtrNewContext(xmlNode $here, xmlNode $origin --> xmlXPathContext) is native(XML2) {*}
}

class xmlDtd is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_DTD_NODE, must be second !
    has xmlCharP $.name; # Name of the DTD
    has xmlNode $.children; # the value of the property link
    has xmlNode $.last; # last child link
    has xmlDoc $.parent; # child->parent link
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document End of common part
    has Pointer $.notations; # Hash table for notations if any
    has Pointer $.elements; # Hash table for elements if any
    has Pointer $.attributes; # Hash table for attributes if any
    has Pointer $.entities; # Hash table for entities if any
    has xmlCharP $.ExternalID; # External identifier for PUBLIC DTD
    has xmlCharP $.SystemID; # URI for a SYSTEM or PUBLIC DTD
    has Pointer $.pentities; # Hash table for param entities if any

    our sub xmlGetIntSubset(const xmlDoc * $doc --> xmlDtd) is native(XML2) is export {*}
    our sub xmlParseDTD(xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(XML2) is export {*}

    method xmlCopyDtd( --> xmlDtd) is native(XML2) {*}
    method xmlFreeDtd() is native(XML2) {*}
    method xmlGetDtdAttrDesc(xmlCharP $elem, xmlCharP $name --> xmlAttribute) is native(XML2) {*}
    method xmlGetDtdElementDesc(xmlCharP $name --> xmlElement) is native(XML2) {*}
    method xmlGetDtdNotationDesc(xmlCharP $name --> xmlNotation) is native(XML2) {*}
    method xmlGetDtdQAttrDesc(xmlCharP $elem, xmlCharP $name, xmlCharP $prefix --> xmlAttribute) is native(XML2) {*}
    method xmlGetDtdQElementDesc(xmlCharP $name, xmlCharP $prefix --> xmlElement) is native(XML2) {*}
}

class xmlElement is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ELEMENT_DECL, must be second !
    has xmlCharP $.name; # Element name
    has xmlNode $.children; # NULL
    has xmlNode $.last; # NULL
    has xmlDtd $.parent; # -> DTD
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document
    has xmlElementTypeVal $.etype; # The type
    has xmlElementContent $.content; # the allowed element content
    has xmlAttribute $.attributes; # List of the declared attributes
    has xmlCharP $.prefix; # the namespace prefix if any
    has xmlRegexp $.contModel; # the validating regexp
    has Pointer $.contModel;
}

class xmlElementContent is repr('CStruct') {
    has xmlElementContentType $.type; # PCDATA, ELEMENT, SEQ or OR
    has xmlElementContentOccur $.ocur; # ONCE, OPT, MULT or PLUS
    has xmlCharP $.name; # Element name
    has xmlElementContent $.c1; # first child
    has xmlElementContent $.c2; # second child
    has xmlElementContent $.parent; # parent
    has xmlCharP $.prefix; # Namespace prefix

    our sub xmlNewElementContent(xmlCharP $name, xmlElementContentType $type --> xmlElementContent) is native(XML2) is export {*}

    method xmlCopyElementContent( --> xmlElementContent) is native(XML2) {*}
    method xmlFreeElementContent() is native(XML2) {*}
}

class xmlEntity is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # XML_ENTITY_DECL, must be second !
    has xmlCharP $.name; # Entity name
    has xmlNode $.children; # First child link
    has xmlNode $.last; # Last child link
    has xmlDtd $.parent; # -> DTD
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document
    has xmlCharP $.orig; # content without ref substitution
    has xmlCharP $.content; # content or ndata if unparsed
    has int32 $.length; # the content length
    has xmlEntityType $.etype; # The entity type
    has xmlCharP $.ExternalID; # External identifier for PUBLIC
    has xmlCharP $.SystemID; # URI for a SYSTEM or PUBLIC Entity
    has xmlEntity $.nexte; # unused
    has xmlCharP $.URI; # the full URI as computed
    has int32 $.owner; # does the entity own the childrens
    has int32 $.checked; # was the entity content checked this is also used to count entities * references done from that entity * and if it contains '<'

    our sub getEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
    our sub getParameterEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
    our sub xmlGetDocEntity(const xmlDoc * $doc, xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
    our sub xmlGetPredefinedEntity(xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
    our sub xmlSAX2GetEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
    our sub xmlSAX2GetParameterEntity(Pointer $ctx, xmlCharP $name --> xmlEntity) is native(XML2) is export {*}
}

class xmlEnumeration is repr('CStruct') {
    has xmlEnumeration $.next; # next one
    has xmlCharP $.name; # Enumeration name

    our sub xmlCreateEnumeration(xmlCharP $name --> xmlEnumeration) is native(XML2) is export {*}

    method xmlCopyEnumeration( --> xmlEnumeration) is native(XML2) {*}
    method xmlFreeEnumeration() is native(XML2) {*}
}

class xmlID is repr('CStruct') {
    has xmlID $.next; # next ID
    has xmlCharP $.value; # The ID name
    has xmlAttr $.attr; # The attribute holding it
    has xmlCharP $.name; # The attribute if attr is not available
    has int32 $.lineno; # The line number if attr is not available
    has xmlDoc $.doc; # The document holding the ID
}

class xmlNode is repr('CStruct') {
    has Pointer $._private; # application data
    has xmlElementType $.type; # type number, must be second !
    has xmlCharP $.name; # the name of the node, or the entity
    has xmlNode $.children; # parent->childs link
    has xmlNode $.last; # last child link
    has xmlNode $.parent; # child->parent link
    has xmlNode $.next; # next sibling link
    has xmlNode $.prev; # previous sibling link
    has xmlDoc $.doc; # the containing document End of common part
    has xmlNs * $.ns; # pointer to the associated namespace
    has xmlCharP $.content; # the content
    has xmlAttr $.properties; # properties list
    has xmlNs * $.nsDef; # namespace definitions on this node
    has Pointer $.psvi; # for type/PSVI informations
    has unsigned short $.line; # line number
    has unsigned short $.extra; # extra data for XPath/XSLT

    our sub xmlDocGetRootElement(const xmlDoc * $doc --> xmlNode) is native(XML2) is export {*}
    our sub xmlGetLastChild(const xmlNode * $parent --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewComment(xmlCharP $content --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewDocText(const xmlDoc * $doc, xmlCharP $content --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewPI(xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewReference(const xmlDoc * $doc, xmlCharP $name --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewText(xmlCharP $content --> xmlNode) is native(XML2) is export {*}
    our sub xmlNewTextLen(xmlCharP $content, int32 $len --> xmlNode) is native(XML2) is export {*}
    our sub xmlStringGetNodeList(const xmlDoc * $doc, xmlCharP $value --> xmlNode) is native(XML2) is export {*}
    our sub xmlStringLenGetNodeList(const xmlDoc * $doc, xmlCharP $value, int32 $len --> xmlNode) is native(XML2) is export {*}

    method xmlAddChild(xmlNode $cur --> xmlNode) is native(XML2) {*}
    method xmlAddChildList(xmlNode $cur --> xmlNode) is native(XML2) {*}
    method xmlAddNextSibling(xmlNode $elem --> xmlNode) is native(XML2) {*}
    method xmlAddPrevSibling(xmlNode $elem --> xmlNode) is native(XML2) {*}
    method xmlAddSibling(xmlNode $elem --> xmlNode) is native(XML2) {*}
    method xmlChildElementCount( --> ulong) is native(XML2) {*}
    method xmlCopyNode(int32 $extended --> xmlNode) is native(XML2) {*}
    method xmlCopyNodeList( --> xmlNode) is native(XML2) {*}
    method xmlCopyProp(xmlAttr $cur --> xmlAttr) is native(XML2) {*}
    method xmlCopyPropList(xmlAttr $cur --> xmlAttr) is native(XML2) {*}
    method xmlDocCopyNode(xmlDoc $doc, int32 $extended --> xmlNode) is native(XML2) {*}
    method xmlFirstElementChild( --> xmlNode) is native(XML2) {*}
    method xmlFreeNode() is native(XML2) {*}
    method xmlFreeNodeList() is native(XML2) {*}
    method xmlLastElementChild( --> xmlNode) is native(XML2) {*}
    method xmlLsCountNode( --> int32) is native(XML2) {*}
    method xmlNewChild(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNewNs(xmlCharP $href, xmlCharP $prefix --> xmlNs) is native(XML2) {*}
    method xmlNewNsProp(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlNewNsPropEatName(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlNewProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlNewTextChild(xmlNs $ns, xmlCharP $name, xmlCharP $content --> xmlNode) is native(XML2) {*}
    method xmlNextElementSibling( --> xmlNode) is native(XML2) {*}
    method xmlNodeAddContent(xmlCharP $content) is native(XML2) {*}
    method xmlNodeAddContentLen(xmlCharP $content, int32 $len) is native(XML2) {*}
    method xmlNodeSetBase(xmlCharP $uri) is native(XML2) {*}
    method xmlNodeSetContent(xmlCharP $content) is native(XML2) {*}
    method xmlNodeSetContentLen(xmlCharP $content, int32 $len) is native(XML2) {*}
    method xmlNodeSetLang(xmlCharP $lang) is native(XML2) {*}
    method xmlNodeSetName(xmlCharP $name) is native(XML2) {*}
    method xmlNodeSetSpacePreserve(int32 $val) is native(XML2) {*}
    method xmlParseInNodeContext(Str $data, int32 $datalen, int32 $options, xmlNodePtr * $lst --> xmlParserErrors) is native(XML2) {*}
    method xmlPreviousElementSibling( --> xmlNode) is native(XML2) {*}
    method xmlReplaceNode(xmlNode $cur --> xmlNode) is native(XML2) {*}
    method xmlSetListDoc(xmlDoc $doc) is native(XML2) {*}
    method xmlSetNs(xmlNs $ns) is native(XML2) {*}
    method xmlSetNsProp(xmlNs $ns, xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlSetProp(xmlCharP $name, xmlCharP $value --> xmlAttr) is native(XML2) {*}
    method xmlSetTreeDoc(xmlDoc $doc) is native(XML2) {*}
    method xmlShellPrintNode() is native(XML2) {*}
    method xmlTextConcat(xmlCharP $content, int32 $len --> int32) is native(XML2) {*}
    method xmlTextMerge(xmlNode $second --> xmlNode) is native(XML2) {*}
    method xmlUnlinkNode() is native(XML2) {*}
    method xmlUnsetNsProp(xmlNs $ns, xmlCharP $name --> int32) is native(XML2) {*}
    method xmlUnsetProp(xmlCharP $name --> int32) is native(XML2) {*}
    method xmlXIncludeProcessTree( --> int32) is native(XML2) {*}
    method xmlXIncludeProcessTreeFlags(int32 $flags --> int32) is native(XML2) {*}
    method xmlXIncludeProcessTreeFlagsData(int32 $flags, Pointer $data --> int32) is native(XML2) {*}
    method xmlXPathCastNodeToNumber( --> num64) is native(XML2) {*}
    method xmlXPathCastNodeToString( --> xmlCharP) is native(XML2) {*}
    method xmlXPathCmpNodes(xmlNode $node2 --> int32) is native(XML2) {*}
    method xmlXPathNewNodeSet( --> xmlXPathObject) is native(XML2) {*}
    method xmlXPathNewValueTree( --> xmlXPathObject) is native(XML2) {*}
    method xmlXPathNodeEval(xmlCharP $str, xmlXPathContext $ctx --> xmlXPathObject) is native(XML2) {*}
    method xmlXPathNodeSetCreate( --> xmlNodeSet) is native(XML2) {*}
    method xmlXPathSetContextNode(xmlXPathContext $ctx --> int32) is native(XML2) {*}
    method xmlXPtrNewCollapsedRange( --> xmlXPathObject) is native(XML2) {*}
    method xmlXPtrNewLocationSetNodes(xmlNode $end --> xmlXPathObject) is native(XML2) {*}
    method xmlXPtrNewRange(int32 $startindex, xmlNode $end, int32 $endindex --> xmlXPathObject) is native(XML2) {*}
    method xmlXPtrNewRangeNodeObject(xmlXPathObject $end --> xmlXPathObject) is native(XML2) {*}
    method xmlXPtrNewRangeNodePoint(xmlXPathObject $end --> xmlXPathObject) is native(XML2) {*}
    method xmlXPtrNewRangeNodes(xmlNode $end --> xmlXPathObject) is native(XML2) {*}
}

class xmlNotation is repr('CStruct') {
    has xmlCharP $.name; # Notation name
    has xmlCharP $.PublicID; # Public identifier, if any
    has xmlCharP $.SystemID; # System identifier, if any
}

class xmlNs is repr('CStruct') {
    has xmlNs $.next; # next Ns link for this node
    has xmlNsType $.type; # global or local
    has xmlCharP $.href; # URL for the namespace
    has xmlCharP $.prefix; # prefix for the namespace
    has Pointer $._private; # application data
    has xmlDoc $.context; # normally an xmlDoc

    our sub getNamespace(Pointer $ctx --> xmlNs) is native(XML2) is export {*}

    method xmlCopyNamespace( --> xmlNs) is native(XML2) {*}
    method xmlCopyNamespaceList( --> xmlNs) is native(XML2) {*}
    method xmlFreeNs() is native(XML2) {*}
    method xmlFreeNsList() is native(XML2) {*}
    method xmlNewNode(xmlCharP $name --> xmlNode) is native(XML2) {*}
    method xmlNewNodeEatName(xmlCharP $name --> xmlNode) is native(XML2) {*}
    method xmlXPathNodeSetFreeNs() is native(XML2) {*}
}

class xmlOutputBuffer is repr('CStruct') {
    has Pointer $.context;
    has xmlOutputWriteCallback $.writecallback;
    has xmlOutputCloseCallback $.closecallback;
    has xmlCharEncodingHandler $.encoder; # I18N conversions to UTF-8
    has xmlBuf $.buffer; # Local buffer encoded in UTF-8 or ISOLatin
    has xmlBuf $.conv; # if encoder != NULL buffer for output
    has int32 $.written; # total number of byte written
    has int32 $.error;

    our sub xmlOutputBufferCreateFd(int32 $fd, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(XML2) is export {*}
    our sub xmlOutputBufferCreateFile(FILE * $file, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(XML2) is export {*}
    our sub xmlOutputBufferCreateFilename(Str $URI, xmlCharEncodingHandler $encoder, int32 $compression --> xmlOutputBuffer) is native(XML2) is export {*}
    our sub xmlOutputBufferCreateIO(xmlOutputWriteCallback $iowrite, xmlOutputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncodingHandler $encoder --> xmlOutputBuffer) is native(XML2) is export {*}

    method htmlDocContentDumpFormatOutput(xmlDoc $cur, Str $encoding, int32 $format) is native(XML2) {*}
    method htmlDocContentDumpOutput(xmlDoc $cur, Str $encoding) is native(XML2) {*}
    method htmlNodeDumpFormatOutput(xmlDoc $doc, xmlNode $cur, Str $encoding, int32 $format) is native(XML2) {*}
    method htmlNodeDumpOutput(xmlDoc $doc, xmlNode $cur, Str $encoding) is native(XML2) {*}
    method xmlNewTextWriter( --> xmlTextWriter) is native(XML2) {*}
    method xmlNodeDumpOutput(xmlDoc $doc, xmlNode $cur, int32 $level, int32 $format, Str $encoding) is native(XML2) {*}
    method xmlOutputBufferClose( --> int32) is native(XML2) {*}
    method xmlOutputBufferFlush( --> int32) is native(XML2) {*}
    method xmlOutputBufferGetContent( --> xmlCharP) is native(XML2) {*}
    method xmlOutputBufferGetSize( --> size_t) is native(XML2) {*}
    method xmlOutputBufferWrite(int32 $len, Str $buf --> int32) is native(XML2) {*}
    method xmlOutputBufferWriteEscape(xmlCharP $str, xmlCharEncodingOutputFunc $escaping --> int32) is native(XML2) {*}
    method xmlOutputBufferWriteString(Str $str --> int32) is native(XML2) {*}
    method xmlSaveFileTo(xmlDoc $cur, Str $encoding --> int32) is native(XML2) {*}
    method xmlSaveFormatFileTo(xmlDoc $cur, Str $encoding, int32 $format --> int32) is native(XML2) {*}
}

class xmlParserCtxt is repr('CStruct') {
    has xmlSAXHandler $.sax; # The SAX handler
    has Pointer $.userData; # For SAX interface only, used by DOM build
    has xmlDoc $.myDoc; # the document being built
    has int32 $.wellFormed; # is the document well formed
    has int32 $.replaceEntities; # shall we replace entities ?
    has xmlCharP $.version; # the XML version string
    has xmlCharP $.encoding; # the declared encoding, if any
    has int32 $.standalone; # standalone document
    has int32 $.html; # an HTML(1)/Docbook(2) document * 3 is HTML after <head> * 10 is HTML after <body> * Input stream stack
    has xmlParserInput $.input; # Current input stream
    has int32 $.inputNr; # Number of current input streams
    has int32 $.inputMax; # Max number of input streams
    has xmlParserInputPtr * $.inputTab; # stack of inputs Node analysis stack only used for DOM building
    has xmlNode $.node; # Current parsed Node
    has int32 $.nodeNr; # Depth of the parsing stack
    has int32 $.nodeMax; # Max depth of the parsing stack
    has xmlNodePtr * $.nodeTab; # array of nodes
    has int32 $.record_info; # Whether node info should be kept
    has xmlParserNodeInfoSeq $.node_seq; # info about each node parsed
    has int32 $.errNo; # error code
    has int32 $.hasExternalSubset; # reference and external subset
    has int32 $.hasPErefs; # the internal subset has PE refs
    has int32 $.external; # are we parsing an external entity
    has int32 $.valid; # is the document valid
    has int32 $.validate; # shall we try to validate ?
    has xmlValidCtxt $.vctxt; # The validity context
    has xmlParserInputState $.instate; # current type of input
    has int32 $.token; # next char look-ahead
    has Str $.directory; # the data directory Node name stack
    has xmlCharP $.name; # Current parsed Node
    has int32 $.nameNr; # Depth of the parsing stack
    has int32 $.nameMax; # Max depth of the parsing stack
    has Pointer[xmlCharP] $.nameTab; # array of nodes
    has long $.nbChars; # number of xmlChar processed
    has long $.checkIndex; # used by progressive parsing lookup
    has int32 $.keepBlanks; # ugly but ...
    has int32 $.disableSAX; # SAX callbacks are disabled
    has int32 $.inSubset; # Parsing is in int 1/ext 2 subset
    has xmlCharP $.intSubName; # name of subset
    has xmlCharP $.extSubURI; # URI of external subset
    has xmlCharP $.extSubSystem; # SYSTEM ID of external subset xml:space values
    has Pointer[int32] $.space; # Should the parser preserve spaces
    has int32 $.spaceNr; # Depth of the parsing stack
    has int32 $.spaceMax; # Max depth of the parsing stack
    has Pointer[int32] $.spaceTab; # array of space infos
    has int32 $.depth; # to prevent entity substitution loops
    has xmlParserInput $.entity; # used to check entities boundaries
    has int32 $.charset; # encoding of the in-memory content actually an xmlCharEncoding
    has int32 $.nodelen; # Those two fields are there to
    has int32 $.nodemem; # Speed up large node parsing
    has int32 $.pedantic; # signal pedantic warnings
    has Pointer $._private; # For user data, libxml won't touch it
    has int32 $.loadsubset; # should the external subset be loaded
    has int32 $.linenumbers; # set line number in element content
    has Pointer $.catalogs; # document's own catalog
    has int32 $.recovery; # run in recovery mode
    has int32 $.progressive; # is this a progressive parsing
    has xmlDict $.dict; # dictionary for the parser
    has Pointer[xmlCharP] $.atts; # array for the attributes callbacks
    has int32 $.maxatts; # the size of the array
    has int32 $.docdict; # * pre-interned strings *
    has xmlCharP $.str_xml;
    has xmlCharP $.str_xmlns;
    has xmlCharP $.str_xml_ns; # * Everything below is used only by the new SAX mode *
    has int32 $.sax2; # operating in the new SAX mode
    has int32 $.nsNr; # the number of inherited namespaces
    has int32 $.nsMax; # the size of the arrays
    has Pointer[xmlCharP] $.nsTab; # the array of prefix/namespace name
    has Pointer[int32] $.attallocs; # which attribute were allocated
    has Pointer[Pointer] $.pushTab; # array of data for push
    has xmlHashTable $.attsDefault; # defaulted attributes if any
    has xmlHashTable $.attsSpecial; # non-CDATA attributes if any
    has int32 $.nsWellFormed; # is the document XML Nanespace okay
    has int32 $.options; # * Those fields are needed only for treaming parsing so far *
    has int32 $.dictNames; # Use dictionary names for the tree
    has int32 $.freeElemsNr; # number of freed element nodes
    has xmlNode $.freeElems; # List of freed element nodes
    has int32 $.freeAttrsNr; # number of freed attributes nodes
    has xmlAttr $.freeAttrs; # * the complete error informations for the last error. *
    has xmlError $.lastError;
    has xmlParserMode $.parseMode; # the parser mode
    has ulong $.nbentities; # number of entities references
    has ulong $.sizeentities; # size of parsed entities for use by HTML non-recursive parser
    has xmlParserNodeInfo * $.nodeInfo; # Current NodeInfo
    has int32 $.nodeInfoNr; # Depth of the parsing stack
    has int32 $.nodeInfoMax; # Max depth of the parsing stack
    has xmlParserNodeInfo * $.nodeInfoTab; # array of nodeInfos
    has int32 $.input_id; # we need to label inputs
    has ulong $.sizeentcopy; # volume of entity copy

    our sub xmlCreateDocParserCtxt(xmlCharP $cur --> xmlParserCtxt) is native(XML2) is export {*}
    our sub xmlCreateEntityParserCtxt(xmlCharP $URL, xmlCharP $ID, xmlCharP $base --> xmlParserCtxt) is native(XML2) is export {*}
    our sub xmlCreateFileParserCtxt(Str $filename --> xmlParserCtxt) is native(XML2) is export {*}
    our sub xmlCreateMemoryParserCtxt(Str $buffer, int32 $size --> xmlParserCtxt) is native(XML2) is export {*}
    our sub xmlCreateURLParserCtxt(Str $filename, int32 $options --> xmlParserCtxt) is native(XML2) is export {*}
    our sub xmlNewParserCtxt( --> xmlParserCtxt) is native(XML2) is export {*}

    method inputPop( --> xmlParserInput) is native(XML2) {*}
    method inputPush(xmlParserInput $value --> int32) is native(XML2) {*}
    method namePop( --> xmlCharP) is native(XML2) {*}
    method namePush(xmlCharP $value --> int32) is native(XML2) {*}
    method nodePop( --> xmlNode) is native(XML2) {*}
    method nodePush(xmlNode $value --> int32) is native(XML2) {*}
    method xmlByteConsumed( --> long) is native(XML2) {*}
    method xmlCheckHTTPInput(xmlParserInput $ret --> xmlParserInput) is native(XML2) {*}
    method xmlClearParserCtxt() is native(XML2) {*}
    method xmlCtxtReadDoc(xmlCharP $cur, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) {*}
    method xmlCtxtReadFd(int32 $fd, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) {*}
    method xmlCtxtReadFile(Str $filename, Str $encoding, int32 $options --> xmlDoc) is native(XML2) {*}
    method xmlCtxtReadIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) {*}
    method xmlCtxtReadMemory(Str $buffer, int32 $size, Str $URL, Str $encoding, int32 $options --> xmlDoc) is native(XML2) {*}
    method xmlCtxtReset() is native(XML2) {*}
    method xmlCtxtResetPush(Str $chunk, int32 $size, Str $filename, Str $encoding --> int32) is native(XML2) {*}
    method xmlCtxtUseOptions(int32 $options --> int32) is native(XML2) {*}
    method xmlCurrentChar(Pointer[int32] $len --> int32) is native(XML2) {*}
    method xmlDecodeEntities(int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(XML2) {*}
    method xmlErrMemory(Str $extra) is native(XML2) {*}
    method xmlFreeParserCtxt() is native(XML2) {*}
    method xmlGetFeature(Str $name, Pointer $result --> int32) is native(XML2) {*}
    method xmlHandleEntity(xmlEntity $entity) is native(XML2) {*}
    method xmlInitParserCtxt( --> int32) is native(XML2) {*}
    method xmlNamespaceParseNCName( --> xmlCharP) is native(XML2) {*}
    method xmlNamespaceParseNSDef( --> xmlCharP) is native(XML2) {*}
    method xmlNamespaceParseQName(xmlChar ** $prefix --> xmlCharP) is native(XML2) {*}
    method xmlNewEntityInputStream(xmlEntity $entity --> xmlParserInput) is native(XML2) {*}
    method xmlNewIOInputStream(xmlParserInputBuffer $input, xmlCharEncoding $enc --> xmlParserInput) is native(XML2) {*}
    method xmlNewInputFromFile(Str $filename --> xmlParserInput) is native(XML2) {*}
    method xmlNewInputStream( --> xmlParserInput) is native(XML2) {*}
    method xmlNewStringInputStream(xmlCharP $buffer --> xmlParserInput) is native(XML2) {*}
    method xmlNewTextWriterPushParser(int32 $compression --> xmlTextWriter) is native(XML2) {*}
    method xmlNextChar() is native(XML2) {*}
    method xmlParseAttValue( --> xmlCharP) is native(XML2) {*}
    method xmlParseAttribute(xmlChar ** $value --> xmlCharP) is native(XML2) {*}
    method xmlParseAttributeListDecl() is native(XML2) {*}
    method xmlParseAttributeType(xmlEnumerationPtr * $tree --> int32) is native(XML2) {*}
    method xmlParseCDSect() is native(XML2) {*}
    method xmlParseCharData(int32 $cdata) is native(XML2) {*}
    method xmlParseCharRef( --> int32) is native(XML2) {*}
    method xmlParseChunk(Str $chunk, int32 $size, int32 $terminate --> int32) is native(XML2) {*}
    method xmlParseComment() is native(XML2) {*}
    method xmlParseContent() is native(XML2) {*}
    method xmlParseCtxtExternalEntity(xmlCharP $URL, xmlCharP $ID, xmlNodePtr * $lst --> int32) is native(XML2) {*}
    method xmlParseDefaultDecl(xmlChar ** $value --> int32) is native(XML2) {*}
    method xmlParseDocTypeDecl() is native(XML2) {*}
    method xmlParseDocument( --> int32) is native(XML2) {*}
    method xmlParseElement() is native(XML2) {*}
    method xmlParseElementChildrenContentDecl(int32 $inputchk --> xmlElementContent) is native(XML2) {*}
    method xmlParseElementContentDecl(xmlCharP $name, xmlElementContentPtr * $result --> int32) is native(XML2) {*}
    method xmlParseElementDecl( --> int32) is native(XML2) {*}
    method xmlParseElementMixedContentDecl(int32 $inputchk --> xmlElementContent) is native(XML2) {*}
    method xmlParseEncName( --> xmlCharP) is native(XML2) {*}
    method xmlParseEncodingDecl( --> xmlCharP) is native(XML2) {*}
    method xmlParseEndTag() is native(XML2) {*}
    method xmlParseEntityDecl() is native(XML2) {*}
    method xmlParseEntityRef( --> xmlEntity) is native(XML2) {*}
    method xmlParseEntityValue(xmlChar ** $orig --> xmlCharP) is native(XML2) {*}
    method xmlParseEnumeratedType(xmlEnumerationPtr * $tree --> int32) is native(XML2) {*}
    method xmlParseEnumerationType( --> xmlEnumeration) is native(XML2) {*}
    method xmlParseExtParsedEnt( --> int32) is native(XML2) {*}
    method xmlParseExternalID(xmlChar ** $publicID, int32 $strict --> xmlCharP) is native(XML2) {*}
    method xmlParseExternalSubset(xmlCharP $ExternalID, xmlCharP $SystemID) is native(XML2) {*}
    method xmlParseMarkupDecl() is native(XML2) {*}
    method xmlParseMisc() is native(XML2) {*}
    method xmlParseName( --> xmlCharP) is native(XML2) {*}
    method xmlParseNamespace() is native(XML2) {*}
    method xmlParseNmtoken( --> xmlCharP) is native(XML2) {*}
    method xmlParseNotationDecl() is native(XML2) {*}
    method xmlParseNotationType( --> xmlEnumeration) is native(XML2) {*}
    method xmlParsePEReference() is native(XML2) {*}
    method xmlParsePI() is native(XML2) {*}
    method xmlParsePITarget( --> xmlCharP) is native(XML2) {*}
    method xmlParsePubidLiteral( --> xmlCharP) is native(XML2) {*}
    method xmlParseQuotedString( --> xmlCharP) is native(XML2) {*}
    method xmlParseReference() is native(XML2) {*}
    method xmlParseSDDecl( --> int32) is native(XML2) {*}
    method xmlParseStartTag( --> xmlCharP) is native(XML2) {*}
    method xmlParseSystemLiteral( --> xmlCharP) is native(XML2) {*}
    method xmlParseTextDecl() is native(XML2) {*}
    method xmlParseVersionInfo( --> xmlCharP) is native(XML2) {*}
    method xmlParseVersionNum( --> xmlCharP) is native(XML2) {*}
    method xmlParseXMLDecl() is native(XML2) {*}
    method xmlParserAddNodeInfo(const xmlParserNodeInfo $info) is native(XML2) {*}
    method xmlParserHandlePEReference() is native(XML2) {*}
    method xmlParserHandleReference() is native(XML2) {*}
    method xmlPopInput( --> xmlChar) is native(XML2) {*}
    method xmlPushInput(xmlParserInput $input --> int32) is native(XML2) {*}
    method xmlScanName( --> xmlCharP) is native(XML2) {*}
    method xmlSetFeature(Str $name, Pointer $value --> int32) is native(XML2) {*}
    method xmlSetupParserForBuffer(xmlCharP $buffer, Str $filename) is native(XML2) {*}
    method xmlSkipBlankChars( --> int32) is native(XML2) {*}
    method xmlSplitQName(xmlCharP $name, xmlChar ** $prefix --> xmlCharP) is native(XML2) {*}
    method xmlStopParser() is native(XML2) {*}
    method xmlStringCurrentChar(xmlCharP $cur, Pointer[int32] $len --> int32) is native(XML2) {*}
    method xmlStringDecodeEntities(xmlCharP $str, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(XML2) {*}
    method xmlStringLenDecodeEntities(xmlCharP $str, int32 $len, int32 $what, xmlChar $end, xmlChar $end2, xmlChar $end3 --> xmlCharP) is native(XML2) {*}
    method xmlSwitchEncoding(xmlCharEncoding $enc --> int32) is native(XML2) {*}
    method xmlSwitchInputEncoding(xmlParserInput $input, xmlCharEncodingHandler $handler --> int32) is native(XML2) {*}
    method xmlSwitchToEncoding(xmlCharEncodingHandler $handler --> int32) is native(XML2) {*}
}

class xmlParserInput is repr('CStruct') {
    has xmlParserInputBuffer $.buf; # UTF-8 encoded buffer
    has Str $.filename; # The file analyzed, if any
    has Str $.directory; # the directory/base of the file
    has xmlCharP $.base; # Base of the array to parse
    has xmlCharP $.cur; # Current char being parsed
    has xmlCharP $.end; # end of the array to parse
    has int32 $.length; # length if known
    has int32 $.line; # Current line
    has int32 $.col; # * NOTE: consumed is only tested for equality in the parser code, *       so even if there is an overflow this should not give troubles *       for parsing very large instances. *
    has ulong $.consumed; # How many xmlChars already consumed
    has xmlParserInputDeallocate $.free; # function to deallocate the base
    has xmlCharP $.encoding; # the encoding string for entity
    has xmlCharP $.version; # the version string for entity
    has int32 $.standalone; # Was that entity marked standalone
    has int32 $.id; # an unique identifier for the entity

    our sub resolveEntity(Pointer $ctx, xmlCharP $publicId, xmlCharP $systemId --> xmlParserInput) is native(XML2) is export {*}
    our sub xmlLoadExternalEntity(Str $URL, Str $ID, xmlParserCtxt $ctxt --> xmlParserInput) is native(XML2) is export {*}
    our sub xmlNoNetExternalEntityLoader(Str $URL, Str $ID, xmlParserCtxt $ctxt --> xmlParserInput) is native(XML2) is export {*}
    our sub xmlSAX2ResolveEntity(Pointer $ctx, xmlCharP $publicId, xmlCharP $systemId --> xmlParserInput) is native(XML2) is export {*}

    method xmlFreeInputStream() is native(XML2) {*}
    method xmlParserInputGrow(int32 $len --> int32) is native(XML2) {*}
    method xmlParserInputRead(int32 $len --> int32) is native(XML2) {*}
    method xmlParserInputShrink() is native(XML2) {*}
    method xmlParserPrintFileContext() is native(XML2) {*}
    method xmlParserPrintFileInfo() is native(XML2) {*}
}

class xmlParserInputBuffer is repr('CStruct') {
    has Pointer $.context;
    has xmlInputReadCallback $.readcallback;
    has xmlInputCloseCallback $.closecallback;
    has xmlCharEncodingHandler $.encoder; # I18N conversions to UTF-8
    has xmlBuf $.buffer; # Local buffer encoded in UTF-8
    has xmlBuf $.raw; # if encoder != NULL buffer for raw input
    has int32 $.compressed; # -1=unknown, 0=not compressed, 1=compressed
    has int32 $.error;
    has ulong $.rawconsumed; # amount consumed from raw

    our sub xmlAllocParserInputBuffer(xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateFd(int32 $fd, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateFile(FILE * $file, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateFilename(Str $URI, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateIO(xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateMem(Str $mem, int32 $size, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}
    our sub xmlParserInputBufferCreateStatic(Str $mem, int32 $size, xmlCharEncoding $enc --> xmlParserInputBuffer) is native(XML2) is export {*}

    method xmlFreeParserInputBuffer() is native(XML2) {*}
    method xmlNewTextReader(Str $URI --> xmlTextReader) is native(XML2) {*}
    method xmlParserInputBufferGrow(int32 $len --> int32) is native(XML2) {*}
    method xmlParserInputBufferPush(int32 $len, Str $buf --> int32) is native(XML2) {*}
    method xmlParserInputBufferRead(int32 $len --> int32) is native(XML2) {*}
}

class xmlRef is repr('CStruct') {
    has xmlRef $.next; # next Ref
    has xmlCharP $.value; # The Ref name
    has xmlAttr $.attr; # The attribute holding it
    has xmlCharP $.name; # The attribute if attr is not available
    has int32 $.lineno; # The line number if attr is not available
}

class xmlSAXHandler is repr('CStruct') {
    has internalSubsetSAXFunc $.internalSubset;
    has isStandaloneSAXFunc $.isStandalone;
    has hasInternalSubsetSAXFunc $.hasInternalSubset;
    has hasExternalSubsetSAXFunc $.hasExternalSubset;
    has resolveEntitySAXFunc $.resolveEntity;
    has getEntitySAXFunc $.getEntity;
    has entityDeclSAXFunc $.entityDecl;
    has notationDeclSAXFunc $.notationDecl;
    has attributeDeclSAXFunc $.attributeDecl;
    has elementDeclSAXFunc $.elementDecl;
    has unparsedEntityDeclSAXFunc $.unparsedEntityDecl;
    has setDocumentLocatorSAXFunc $.setDocumentLocator;
    has startDocumentSAXFunc $.startDocument;
    has endDocumentSAXFunc $.endDocument;
    has startElementSAXFunc $.startElement;
    has endElementSAXFunc $.endElement;
    has referenceSAXFunc $.reference;
    has charactersSAXFunc $.characters;
    has ignorableWhitespaceSAXFunc $.ignorableWhitespace;
    has processingInstructionSAXFunc $.processingInstruction;
    has commentSAXFunc $.comment;
    has warningSAXFunc $.warning;
    has errorSAXFunc $.error;
    has fatalErrorSAXFunc $.fatalError; # unused error() get all the errors
    has getParameterEntitySAXFunc $.getParameterEntity;
    has cdataBlockSAXFunc $.cdataBlock;
    has externalSubsetSAXFunc $.externalSubset;
    has uint32 $.initialized; # The following fields are extensions available only on version 2
    has Pointer $._private;
    has startElementNsSAX2Func $.startElementNs;
    has endElementNsSAX2Func $.endElementNs;
    has xmlStructuredErrorFunc $.serror;
    method xmlCreateIOParserCtxt(Pointer $user_data, xmlInputReadCallback $ioread, xmlInputCloseCallback $ioclose, Pointer $ioctx, xmlCharEncoding $enc --> xmlParserCtxt) is native(XML2) {*}
    method xmlCreatePushParserCtxt(Pointer $user_data, Str $chunk, int32 $size, Str $filename --> xmlParserCtxt) is native(XML2) {*}
    method xmlIOParseDTD(xmlParserInputBuffer $input, xmlCharEncoding $enc --> xmlDtd) is native(XML2) {*}
    method xmlSAXParseDTD(xmlCharP $ExternalID, xmlCharP $SystemID --> xmlDtd) is native(XML2) {*}
    method xmlSAXParseDoc(xmlCharP $cur, int32 $recovery --> xmlDoc) is native(XML2) {*}
    method xmlSAXParseEntity(Str $filename --> xmlDoc) is native(XML2) {*}
    method xmlSAXParseFile(Str $filename, int32 $recovery --> xmlDoc) is native(XML2) {*}
    method xmlSAXParseFileWithData(Str $filename, int32 $recovery, Pointer $data --> xmlDoc) is native(XML2) {*}
    method xmlSAXParseMemory(Str $buffer, int32 $size, int32 $recovery --> xmlDoc) is native(XML2) {*}
    method xmlSAXParseMemoryWithData(Str $buffer, int32 $size, int32 $recovery, Pointer $data --> xmlDoc) is native(XML2) {*}
    method xmlSAXUserParseFile(Pointer $user_data, Str $filename --> int32) is native(XML2) {*}
    method xmlSAXUserParseMemory(Pointer $user_data, Str $buffer, int32 $size --> int32) is native(XML2) {*}
}

class xmlSAXLocator is repr('CStruct') {
    has const xmlChar *(*getPublicId) $.getPublicId;
    has const xmlChar *(*getSystemId) $.getSystemId;
    has int(*getLineNumber) $.getLineNumber;
    has int(*getColumnNumber) $.getColumnNumber;
}

our sub xmlBufContent(const xmlBuf * $buf --> xmlCharP) is native(XML2) is export {*}
our sub xmlBufUse(const xmlBuf $buf --> size_t) is native(XML2) is export {*}
our sub xmlBufferContent(const xmlBuffer * $buf --> xmlCharP) is native(XML2) is export {*}
our sub xmlBufferDump(FILE * $file, xmlBuffer $buf --> int32) is native(XML2) is export {*}
our sub xmlBufferLength(const xmlBuffer * $buf --> int32) is native(XML2) is export {*}
our sub xmlBuildQName(xmlCharP $ncname, xmlCharP $prefix, xmlCharP $memory, int32 $len --> xmlCharP) is native(XML2) is export {*}
our sub xmlDocDump(FILE * $f, xmlDoc $cur --> int32) is native(XML2) is export {*}
our sub xmlDocFormatDump(FILE * $f, xmlDoc $cur, int32 $format --> int32) is native(XML2) is export {*}
our sub xmlElemDump(FILE * $f, xmlDoc $doc, xmlNode $cur) is native(XML2) is export {*}
our sub xmlGetBufferAllocationScheme( --> xmlBufferAllocationScheme) is native(XML2) is export {*}
our sub xmlGetCompressMode( --> int32) is native(XML2) is export {*}
our sub xmlGetDocCompressMode(const xmlDoc * $doc --> int32) is native(XML2) is export {*}
our sub xmlGetLineNo(const xmlNode * $node --> long) is native(XML2) is export {*}
our sub xmlGetNoNsProp(const xmlNode * $node, xmlCharP $name --> xmlCharP) is native(XML2) is export {*}
our sub xmlGetNodePath(const xmlNode * $node --> xmlCharP) is native(XML2) is export {*}
our sub xmlGetNsList(const xmlDoc * $doc, const xmlNode * $node --> xmlNsPtr *) is native(XML2) is export {*}
our sub xmlGetNsProp(const xmlNode * $node, xmlCharP $name, xmlCharP $nameSpace --> xmlCharP) is native(XML2) is export {*}
our sub xmlGetProp(const xmlNode * $node, xmlCharP $name --> xmlCharP) is native(XML2) is export {*}
our sub xmlIsBlankNode(const xmlNode * $node --> int32) is native(XML2) is export {*}
our sub xmlIsXHTML(xmlCharP $systemID, xmlCharP $publicID --> int32) is native(XML2) is export {*}
our sub xmlNodeGetBase(const xmlDoc * $doc, const xmlNode * $cur --> xmlCharP) is native(XML2) is export {*}
our sub xmlNodeGetContent(const xmlNode * $cur --> xmlCharP) is native(XML2) is export {*}
our sub xmlNodeGetLang(const xmlNode * $cur --> xmlCharP) is native(XML2) is export {*}
our sub xmlNodeGetSpacePreserve(const xmlNode * $cur --> int32) is native(XML2) is export {*}
our sub xmlNodeIsText(const xmlNode * $node --> int32) is native(XML2) is export {*}
our sub xmlNodeListGetRawString(const xmlDoc * $doc, const xmlNode * $list, int32 $inLine --> xmlCharP) is native(XML2) is export {*}
our sub xmlSaveFile(Str $filename, xmlDoc $cur --> int32) is native(XML2) is export {*}
our sub xmlSaveFileEnc(Str $filename, xmlDoc $cur, Str $encoding --> int32) is native(XML2) is export {*}
our sub xmlSaveFormatFile(Str $filename, xmlDoc $cur, int32 $format --> int32) is native(XML2) is export {*}
our sub xmlSaveFormatFileEnc(Str $filename, xmlDoc $cur, Str $encoding, int32 $format --> int32) is native(XML2) is export {*}
our sub xmlSetBufferAllocationScheme(xmlBufferAllocationScheme $scheme) is native(XML2) is export {*}
our sub xmlSetCompressMode(int32 $mode) is native(XML2) is export {*}
our sub xmlSplitQName2(xmlCharP $name, xmlChar ** $prefix --> xmlCharP) is native(XML2) is export {*}
our sub xmlSplitQName3(xmlCharP $name, Pointer[int32] $len --> xmlCharP) is native(XML2) is export {*}
our sub xmlValidateNCName(xmlCharP $value, int32 $space --> int32) is native(XML2) is export {*}
our sub xmlValidateNMToken(xmlCharP $value, int32 $space --> int32) is native(XML2) is export {*}
our sub xmlValidateName(xmlCharP $value, int32 $space --> int32) is native(XML2) is export {*}
our sub xmlValidateQName(xmlCharP $value, int32 $space --> int32) is native(XML2) is export {*}
