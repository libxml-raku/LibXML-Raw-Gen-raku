use v6;
# -- DO NOT EDIT --
# generated by: bin/libxml-generator.raku

unit module LibXML::Raw::Gen::valid;
# The DTD validation:
#    API for the DTD handling and the validity checking 
use LibXML::Raw::Defs :$XML2, :xmlCharP;

class xmlAttributeTable is repr('CPointer') {
    method xmlCopyAttributeTable( --> xmlAttributeTable) is native(XML2) {*}
    method xmlFreeAttributeTable() is native(XML2) {*}
}

class xmlElementTable is repr('CPointer') {
    method xmlCopyElementTable( --> xmlElementTable) is native(XML2) {*}
    method xmlFreeElementTable() is native(XML2) {*}
}

class xmlIDTable is repr('CPointer') {
    method xmlFreeIDTable() is native(XML2) {*}
}

class xmlNotationTable is repr('CPointer') {
    method xmlCopyNotationTable( --> xmlNotationTable) is native(XML2) {*}
    method xmlFreeNotationTable() is native(XML2) {*}
}

class xmlRefTable is repr('CPointer') {
    method xmlFreeRefTable() is native(XML2) {*}
}

class xmlValidCtxt is repr('CStruct') {
    has Pointer $.userData; # user specific data block
    has xmlValidityErrorFunc $.error; # the callback in case of errors
    has xmlValidityWarningFunc $.warning; # the callback in case of warning Node analysis stack used when validating within entities
    has xmlNode $.node; # Current parsed Node
    has int32 $.nodeNr; # Depth of the parsing stack
    has int32 $.nodeMax; # Max depth of the parsing stack
    has xmlNodePtr * $.nodeTab; # array of nodes
    has uint32 $.finishDtd; # finished validating the Dtd ?
    has xmlDoc $.doc; # the document
    has int32 $.valid; # temporary validity check result state state used for non-determinist content validation
    has xmlValidState * $.vstate; # current state
    has int32 $.vstateNr; # Depth of the validation stack
    has int32 $.vstateMax; # Max depth of the validation stack
    has xmlValidState * $.vstateTab; # array of validation states
    has xmlAutomata $.am; # the automata
    has xmlAutomataState $.state; # used to build the automata
    has Pointer $.am;
    has Pointer $.state;

    our sub xmlNewValidCtxt( --> xmlValidCtxt) is native(XML2) is export {*}

    method xmlAddAttributeDecl(xmlDtd $dtd, xmlCharP $elem, xmlCharP $name, xmlCharP $ns, xmlAttributeType $type, xmlAttributeDefault $def, xmlCharP $defaultValue, xmlEnumeration $tree --> xmlAttribute) is native(XML2) {*}
    method xmlAddElementDecl(xmlDtd $dtd, xmlCharP $name, xmlElementTypeVal $type, xmlElementContent $content --> xmlElement) is native(XML2) {*}
    method xmlAddID(xmlDoc $doc, xmlCharP $value, xmlAttr $attr --> xmlID) is native(XML2) {*}
    method xmlAddNotationDecl(xmlDtd $dtd, xmlCharP $name, xmlCharP $PublicID, xmlCharP $SystemID --> xmlNotation) is native(XML2) {*}
    method xmlAddRef(xmlDoc $doc, xmlCharP $value, xmlAttr $attr --> xmlRef) is native(XML2) {*}
    method xmlFreeValidCtxt() is native(XML2) {*}
    method xmlValidBuildContentModel(xmlElement $elem --> int32) is native(XML2) {*}
    method xmlValidCtxtNormalizeAttributeValue(xmlDoc $doc, xmlNode $elem, xmlCharP $name, xmlCharP $value --> xmlCharP) is native(XML2) {*}
    method xmlValidateAttributeDecl(xmlDoc $doc, xmlAttribute $attr --> int32) is native(XML2) {*}
    method xmlValidateDocument(xmlDoc $doc --> int32) is native(XML2) {*}
    method xmlValidateDocumentFinal(xmlDoc $doc --> int32) is native(XML2) {*}
    method xmlValidateDtd(xmlDoc $doc, xmlDtd $dtd --> int32) is native(XML2) {*}
    method xmlValidateDtdFinal(xmlDoc $doc --> int32) is native(XML2) {*}
    method xmlValidateElement(xmlDoc $doc, xmlNode $elem --> int32) is native(XML2) {*}
    method xmlValidateElementDecl(xmlDoc $doc, xmlElement $elem --> int32) is native(XML2) {*}
    method xmlValidateNotationDecl(xmlDoc $doc, xmlNotation $nota --> int32) is native(XML2) {*}
    method xmlValidateNotationUse(xmlDoc $doc, xmlCharP $notationName --> int32) is native(XML2) {*}
    method xmlValidateOneAttribute(xmlDoc $doc, xmlNode $elem, xmlAttr $attr, xmlCharP $value --> int32) is native(XML2) {*}
    method xmlValidateOneElement(xmlDoc $doc, xmlNode $elem --> int32) is native(XML2) {*}
    method xmlValidateOneNamespace(xmlDoc $doc, xmlNode $elem, xmlCharP $prefix, xmlNs $ns, xmlCharP $value --> int32) is native(XML2) {*}
    method xmlValidatePopElement(xmlDoc $doc, xmlNode $elem, xmlCharP $qname --> int32) is native(XML2) {*}
    method xmlValidatePushCData(xmlCharP $data, int32 $len --> int32) is native(XML2) {*}
    method xmlValidatePushElement(xmlDoc $doc, xmlNode $elem, xmlCharP $qname --> int32) is native(XML2) {*}
    method xmlValidateRoot(xmlDoc $doc --> int32) is native(XML2) {*}
}

class xmlValidState is repr('CPointer') {
}

our sub xmlSnprintfElementContent(Str $buf, int32 $size, xmlElementContent $content, int32 $englob) is native(XML2) is export {*}
our sub xmlSprintfElementContent(Str $buf, xmlElementContent $content, int32 $englob) is native(XML2) is export {*}
our sub xmlValidGetPotentialChildren(xmlElementContent * $ctree, const xmlChar ** $names, Pointer[int32] $len, int32 $max --> int32) is native(XML2) is export {*}
our sub xmlValidGetValidElements(xmlNode * $prev, xmlNode * $next, const xmlChar ** $names, int32 $max --> int32) is native(XML2) is export {*}
our sub xmlValidateAttributeValue(xmlAttributeType $type, xmlCharP $value --> int32) is native(XML2) is export {*}
our sub xmlValidateNameValue(xmlCharP $value --> int32) is native(XML2) is export {*}
our sub xmlValidateNamesValue(xmlCharP $value --> int32) is native(XML2) is export {*}
our sub xmlValidateNmtokenValue(xmlCharP $value --> int32) is native(XML2) is export {*}
our sub xmlValidateNmtokensValue(xmlCharP $value --> int32) is native(XML2) is export {*}
